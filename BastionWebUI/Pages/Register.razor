@page "/register"
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject StorageService StorageService

<MudText Typo="Typo.h3" GutterBottom="true">Register</MudText>

<MudGrid>
    <MudItem md="6">
        <MudText Typo="Typo.body1" GutterBottom="true">Create a new account.</MudText>

        <MudForm @ref="_form">
            <MudGrid>
                <MudItem md="12">
                    <MudTextField Label="Username"
                                  @bind-Value="_username"
                                  Variant="Variant.Filled"
                                  FullWidth="true"
                                  Required="true"
                                  For="@(() => _username)"/>
                </MudItem>

                <MudItem md="12">
                    <MudTextField Label="Password"
                                  @bind-Value="_password"
                                  Variant="Variant.Filled"
                                  FullWidth="true"
                                  InputType="InputType.Password"
                                  Required="true"
                                  For="@(() => _password)"/>
                </MudItem>

                <MudItem md="12">
                    <MudTextField Label="Confirm Password"
                                  @bind-Value="_confirmPassword"
                                  Variant="Variant.Filled"
                                  FullWidth="true"
                                  InputType="InputType.Password"
                                  Required="true"
                                  For="@(() => _confirmPassword)"/>
                </MudItem>

                <MudItem md="12">
                    <MudButton OnClick="HandleRegister"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               FullWidth="true"
                               Disabled="@_isLoading">
                        @RegisterButtonContent()
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>

        <MudGrid Class="mt-4">
            <MudItem md="12">
                <MudLink Href="/login">Already have an account? Log in</MudLink>
            </MudItem>
        </MudGrid>
    </MudItem>

    <MudItem md="6">
        <MudText Typo="Typo.body1" GutterBottom="true">Or use another service to register.</MudText>
    </MudItem>
</MudGrid>

@code {
    private MudForm? _form;
    private string _username = string.Empty;
    private string _password = string.Empty;
    private string _confirmPassword = string.Empty;
    private bool _isLoading;

    private async Task HandleRegister()
    {
        Console.WriteLine("task called!"); // Debug, Can remove once no longer needed 

        if (_form is null)
        {
            Snackbar.Add("Form is not initialized.", Severity.Error);
            return;
        }

        await _form.Validate();

        if (!_form.IsValid)
        {
            Snackbar.Add("Please fill out all required fields.", Severity.Warning);
            return;
        }

        if (_password != _confirmPassword)
        {
            Snackbar.Add("Passwords do not match.", Severity.Error);
            return;
        }

        try
        {
            _isLoading = true;

            var registerData = new
            {
                username = _username, password = _password
            };

            var response = await Http.PostAsJsonAsync("/auth/register", registerData);
            var jsonString = await response.Content.ReadAsStringAsync();
            var json = JsonSerializer.Deserialize<JsonElement>(jsonString);

            if (response.IsSuccessStatusCode &&
                json.TryGetProperty("success", out var successElement) &&
                successElement.ValueKind == JsonValueKind.True)
            {
                Snackbar.Add("Registration successful! Please log in.", Severity.Success);
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var errorType = json.TryGetProperty("error", out var errorElement)
                    ? errorElement.GetString() ?? "unknown"
                    : "unknown";

                var errorMessage = errorType switch
                {
                    "userexists" => "Username is already taken.",
                    "internalError" => "Server error. Please try again later.",
                    _ => "Registration failed. Please contact your Administrator"
                };

                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Registration failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private RenderFragment RegisterButtonContent()
    {
        return __builder =>
        {
            if (_isLoading)
            {
                __builder.OpenComponent<MudProgressCircular>(0);
                __builder.AddAttribute(1, "Size", 16);
                __builder.AddAttribute(2, "Indeterminate", true);
                __builder.AddAttribute(3, "Class", "me-2");
                __builder.CloseComponent();
                __builder.AddContent(4, "Registering...");
            }
            else
            {
                __builder.AddContent(5, "Register");
            }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var storedToken = await StorageService.GetItemAsync("jwtToken");
        if (!string.IsNullOrEmpty(storedToken))
        {
            Snackbar.Add("You are already logged in!", Severity.Error);
            NavigationManager.NavigateTo("/dashboard");
        }
    }

}
