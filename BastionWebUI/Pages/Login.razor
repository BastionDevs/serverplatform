@page "/login"
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject StorageService StorageService

<MudText Typo="Typo.h3" GutterBottom="true">Log in</MudText>

<MudGrid>
    <MudItem md="6">
        <MudText Typo="Typo.body1" GutterBottom="true">Use a local account to log in.</MudText>

        <MudForm @ref="form">
            <MudGrid>
                <MudItem md="12">
                    <MudTextField Label="Username"
                                  @bind-Value="username"
                                  Variant="Variant.Filled"
                                  FullWidth="true"
                                  Required="true"
                                  For="@(() => username)"/>
                </MudItem>
                <MudItem md="12">
                    <MudTextField Label="Password"
                                  @bind-Value="password"
                                  Variant="Variant.Filled"
                                  FullWidth="true"
                                  InputType="InputType.Password"
                                  Required="true"
                                  For="@(() => password)"/>
                </MudItem>
                <MudItem md="12">
                    <MudCheckBox @bind-Value="rememberMe" Label="Remember Me"></MudCheckBox>
                </MudItem>
                <MudItem md="12">
                    <MudButton OnClick="HandleLogin"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               FullWidth="true"
                               Disabled="@isLoading">
                        @LoginButtonContent()
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>

        <MudGrid Class="mt-4">
            <MudItem md="12">
                <MudLink Href="/forgot-password">Forgot your password?</MudLink>
                <br/>
                <MudLink Href="/register">Register as a new user</MudLink>
                <br/>
            </MudItem>
        </MudGrid>
    </MudItem>

    <MudItem md="6">
        <MudText GutterBottom="true" Typo="Typo.body1">Use another service to log in.</MudText>
        <ExternalLoginPicker/>
    </MudItem>
</MudGrid>

@code {
    private MudForm? form;
    private string username = string.Empty;
    private string password = string.Empty;
    private bool rememberMe;
    private bool isLoading;

    private async Task HandleLogin()
    {
        if (form is null)
        {
            Snackbar.Add("Form is not initialized.", Severity.Error);
            return;
        }

        await form.Validate();

        if (!form.IsValid)
        {
            Snackbar.Add("Please fill out all required fields.", Severity.Warning);
            return;
        }

        try
        {
            isLoading = true;

            var loginData = new
            {
                username, password
            };

            var response = await Http.PostAsJsonAsync("/auth/login", loginData);
            var jsonString = await response.Content.ReadAsStringAsync();
            var json = JsonSerializer.Deserialize<JsonElement>(jsonString);

            if (response.IsSuccessStatusCode &&
                json.TryGetProperty("success", out var successElement) &&
                successElement.ValueKind == JsonValueKind.True)
            {
                var token = json.TryGetProperty("token", out var tokenElement)
                    ? tokenElement.GetString() ?? "NO_TOKEN"
                    : "NO_TOKEN";

                Snackbar.Add("Login successful!", Severity.Success);

                await StorageService.SetItemAsync("jwtToken", token);

                await Task.Delay(1000);
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                var errorType = json.TryGetProperty("error", out var errorElement)
                    ? errorElement.GetString() ?? "unknown"
                    : "unknown";

                var errorMessage = errorType switch
                {
                    "incorrectusrorpwd" => "Incorrect User or Password.",
                    "internalError" => "Server error. Please try again later.",
                    _ => "Login failed. Please contact your Administrator"
                };

                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Login failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private RenderFragment LoginButtonContent()
    {
        return __builder => {
            if (isLoading)
            {
                __builder.OpenComponent<MudProgressCircular>(0);
                __builder.AddAttribute(1, "Size", 16);
                __builder.AddAttribute(2, "Indeterminate", true);
                __builder.AddAttribute(3, "Class", "me-2");
                __builder.CloseComponent();
                __builder.AddContent(4, "Logging in...");
            }
            else
            {
                __builder.AddContent(5, "Log in");
            }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var storedToken = await StorageService.GetItemAsync("jwtToken");
        if (!string.IsNullOrEmpty(storedToken))
        {
            Snackbar.Add("You are already logged in!", Severity.Error);
            NavigationManager.NavigateTo("/dashboard");
        }
    }
}
