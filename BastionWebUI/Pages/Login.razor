@page "/login"
@using MudBlazor
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h5" Class="mb-2">Login</MudText>

            <MudTextField Label="Username"
                          @bind-Value="username"
                          Variant="Variant.Filled"
                          FullWidth
                          Required="true" />

            <MudTextField Label="Password"
                          @bind-Value="password"
                          Variant="Variant.Filled"
                          FullWidth
                          InputType="InputType.Password"
                          Required="true" />

            <MudButton OnClick="HandleLogin"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       Class="mt-4"
                       Disabled="@isLoading">
                @LoginButtonContent()
            </MudButton>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            Snackbar.Add("Username or password cannot be empty.", Severity.Warning);
            return;
        }

        try
        {
            isLoading = true;

            var loginData = new
            {
                username = username,
                password = password
            };

            var response = await Http.PostAsJsonAsync("/auth", loginData);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Login successful! Token: {token}");
                Snackbar.Add("Login successful!", Severity.Success);
                await Task.Delay(1000); // Let user see it for 1 second
                NavigationManager.NavigateTo("/dashboard");

            }
            else
            {
                Snackbar.Add("Invalid username or password.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Login failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private RenderFragment LoginButtonContent() => __builder =>
    {
        if (isLoading)
        {
            __builder.OpenComponent<MudProgressCircular>(0);
            __builder.AddAttribute(1, "Size", 16);
            __builder.AddAttribute(2, "Indeterminate", true);
            __builder.AddAttribute(3, "Class", "me-2");
            __builder.CloseComponent();
            __builder.AddContent(4, "Logging in...");
        }
        else
        {
            __builder.AddContent(5, "Login");
        }
    };
}
