@page "/login"
@using MudBlazor
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h5" Class="mb-2">Login</MudText>

            <MudTextField Label="Username"
                          @bind-Value="username"
                          Variant="Variant.Filled"
                          FullWidth
                          Required="true" />

            <MudTextField Label="Password"
                          @bind-Value="password"
                          Variant="Variant.Filled"
                          FullWidth
                          InputType="InputType.Password"
                          Required="true" />

            <MudButton OnClick="HandleLogin"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       Class="mt-4"
                       Disabled="@isLoading">
                @LoginButtonContent()
            </MudButton>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            Snackbar.Add("Username or password cannot be empty.", Severity.Warning);
            return;
        }

        try
        {
            isLoading = true;

            var loginData = new
            {
                username = username,
                password = password
            };

            var response = await Http.PostAsJsonAsync("/auth", loginData);
            var jsonString = await response.Content.ReadAsStringAsync();
            var json = JsonSerializer.Deserialize<JsonElement>(jsonString);

            if (response.IsSuccessStatusCode &&
                json.TryGetProperty("success", out var successElement) &&
                successElement.ValueKind == JsonValueKind.True)
            {
                string token = json.TryGetProperty("token", out var tokenElement)
                    ? tokenElement.GetString() ?? "NO_TOKEN"
                    : "NO_TOKEN";

                Console.WriteLine($"Login successful! Token: {token}");
                Snackbar.Add("Login successful!", Severity.Success);

                // TODO: Save the token securely (e.g., in local storage or protected storage)

                await Task.Delay(1000);
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                string errorType = json.TryGetProperty("error", out var errorElement)
                    ? errorElement.GetString() ?? "unknown"
                    : "unknown";

                string errorMessage = errorType switch
                {
                    "wrongPassword" => "Incorrect password.",
                    "userNotFound" => "User not found.",
                    "internalError" => "Server error. Please try again later.",
                    _ => "Login failed."
                };

                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Login failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private RenderFragment LoginButtonContent() => __builder =>
    {
        if (isLoading)
        {
            __builder.OpenComponent<MudProgressCircular>(0);
            __builder.AddAttribute(1, "Size", 16);
            __builder.AddAttribute(2, "Indeterminate", true);
            __builder.AddAttribute(3, "Class", "me-2");
            __builder.CloseComponent();
            __builder.AddContent(4, "Logging in...");
        }
        else
        {
            __builder.AddContent(5, "Login");
        }
    };
}
